១. ការណែនាំជាមូលដ្ឋាន
ខ្ញុំនឹងណែនាំជំហានដើម្បីបង្កើត៖

Sign Up Form: អនុញ្ញាតឱ្យអ្នកប្រើបង្កើតគណនីជាមួយ Email, Password, និង Name។
Log In Form: អនុញ្ញាតឱ្យអ្នកប្រើចូលប្រព័ន្ធដោយប្រើ Credentials Provider។
បញ្ហាញទិន្ន័យ: បង្ហាញព័ត៌មានអ្នកប្រើ (ឧ. Name, Email) នៅលើ Profile page។
ខ្ញុំសន្មតថាអ្នកប្រើ Prisma ជាមួយ SQLite (អាចផ្លាស់ប្តូរទៅ MongoDB ឬ Database ផ្សេងបាន) និង Credentials Provider សម្រាប់ Authentication។

២. រៀបចំ Project និង Dependencies
បង្កើត Project និង Dependencies:
បើមិនទាន់មាន Project:
bash

Collapse

Wrap

Run

Copy
npx create-next-app@latest my-auth-app
ជ្រើសរើស TypeScript, App Router, និង Tailwind CSS (ស្រេចចិត្ត)។
ដំឡើង Dependencies:
bash

Collapse

Wrap

Run

Copy
npm install next-auth prisma @prisma/client bcrypt
npx prisma init
កំណត់ Database:
កែ .env សម្រាប់ SQLite (ឬ Database ផ្សេង):
env

Collapse

Wrap

Copy
DATABASE_URL="file:./db.sqlite"
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-secret-key
បង្កើត Secret Key:
bash

Collapse

Wrap

Run

Copy
openssl rand -base64 32
កែ prisma/schema.prisma:
prisma

Collapse

Wrap

Copy
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
}
Sync Database:
bash

Collapse

Wrap

Run

Copy
npx prisma migrate dev --name init
៣. រៀបចំ Authentication ជាមួយ lib/auth.ts
អ្នកបាននិយាយថាប្រើ auth.ts នៅក្នុង lib folder។ ខ្ញុំនឹងបង្កើត lib/auth.ts សម្រាប់កំណត់ authOptions ដែលនឹងប្រើនៅក្នុង API route។

បង្កើត lib/auth.ts:

ts

Collapse

Wrap

Copy
import { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";

const prisma = new PrismaClient();

export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error("Missing email or password");
        }

        const user = await prisma.user.findUnique({
          where: { email: credentials.email },
        });

        if (!user || !user.password) {
          throw new Error("Invalid email or password");
        }

        const isValid = await bcrypt.compare(credentials.password, user.password);

        if (!isValid) {
          throw new Error("Invalid email or password");
        }

        return { id: user.id.toString(), email: user.email, name: user.name };
      },
    }),
  ],
  pages: {
    signIn: "/login",
  },
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email;
        token.name = user.name;
      }
      return token;
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = token.id as string;
        session.user.email = token.email as string;
        session.user.name = token.name as string;
      }
      return session;
    },
  },
};
ចំណុចសំខាន់:
CredentialsProvider ត្រូវបានកំណត់សម្រាប់ Email/Password login។
prisma.user.findUnique ពិនិត្យអ្នកប្រើនៅក្នុង Database។
bcrypt.compare ប្រៀបធៀប Password ដែលបាន Hash។
callbacks បន្ថែម User data (id, email, name) ទៅក្នុង Session។
បង្កើត API Route:

នៅ app/api/auth/[...nextauth]/route.ts:
ts

Collapse

Wrap

Copy
import NextAuth from "next-auth";
import { authOptions } from "@/lib/auth";

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
បន្ថែម SessionProvider:

កែ app/layout.tsx:
tsx

Collapse

Wrap

Copy
import { SessionProvider } from "next-auth/react";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <SessionProvider>{children}</SessionProvider>
      </body>
    </html>
  );
}
៤. បង្កើត Sign Up Form
បង្កើត Sign Up Page:
នៅ app/signup/page.tsx:
tsx

Collapse

Wrap

Copy
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";

export default function SignUp() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      const response = await fetch("/api/signup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password, name }),
      });

      if (response.ok) {
        router.push("/login");
      } else {
        const data = await response.json();
        setError(data.message || "Something went wrong");
      }
    } catch (err) {
      setError("Failed to sign up");
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10">
      <h1 className="text-2xl font-bold mb-5">Sign Up</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block">Name</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full border p-2 rounded"
            required
          />
        </div>
        <div>
          <label className="block">Email</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full border p-2 rounded"
            required
          />
        </div>
        <div>
          <label className="block">Password</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full border p-2 rounded"
            required
          />
        </div>
        {error && <p className="text-red-500">{error}</p>}
        <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded">
          Sign Up
        </button>
      </form>
    </div>
  );
}
បង្កើត API Route សម្រាប់ Sign Up:
នៅ app/api/signup/route.ts:
ts

Collapse

Wrap

Copy
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";

const prisma = new PrismaClient();

export async function POST(request: Request) {
  try {
    const { email, password, name } = await request.json();

    if (!email || !password || !name) {
      return NextResponse.json({ message: "Missing fields" }, { status: 400 });
    }

    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      return NextResponse.json({ message: "Email already exists" }, { status: 400 });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        name,
      },
    });

    return NextResponse.json({ message: "User created" }, { status: 200 });
  } catch (error) {
    return NextResponse.json({ message: "Server error" }, { status: 500 });
  }
}
៥. បង្កើត Log In Form
បង្កើត Log In Page:
នៅ app/login/page.tsx:
tsx

Collapse

Wrap

Copy
"use client";
import { useState } from "react";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";

export default function LogIn() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    const result = await signIn("credentials", {
      redirect: false,
      email,
      password,
    });

    if (result?.error) {
      setError("Invalid email or password");
    } else {
      router.push("/profile");
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10">
      <h1 className="text-2xl font-bold mb-5">Log In</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block">Email</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full border p-2 rounded"
            required
          />
        </div>
        <div>
          <label className="block">Password</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full border p-2 rounded"
            required
          />
        </div>
        {error && <p className="text-red-500">{error}</p>}
        <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded">
          Log In
        </button>
      </form>
    </div>
  );
}
៦. បញ្ហាញទិន្ន័យនៅ Profile Page
បង្កើត Profile Page:
នៅ app/profile/page.tsx:
tsx

Collapse

Wrap

Copy
"use client";
import { useSession, signOut } from "next-auth/react";

export default function Profile() {
  const { data: session, status } = useSession();

  if (status === "loading") {
    return <div className="text-center mt-10">Loading...</div>;
  }

  if (!session) {
    return <div className="text-center mt-10">Please log in to view your profile.</div>;
  }

  return (
    <div className="max-w-md mx-auto mt-10">
      <h1 className="text-2xl font-bold mb-5">Profile</h1>
      <p><strong>Name:</strong> {session.user?.name}</p>
      <p><strong>Email:</strong> {session.user?.email}</p>
      <button
        onClick={() => signOut({ callbackUrl: "/login" })}
        className="mt-4 bg-red-500 text-white p-2 rounded"
      >
        Sign Out
      </button>
    </div>
  );
}
ការពន្យល់:
useSession Hook ទាញយក User data (name, email) ពី Session។
បើអ្នកប្រើមិនទាន់ Log In ទេ ទំព័រនឹងបង្ហាញសារឱ្យ Log In។
ប៊ូតុង Sign Out នឹង Redirect ទៅ /login បន្ទាប់ពី Sign Out។
៧. ការពារ Profile Page (Optional)
បើអ្នកចង់ការពារ /profile ដើម្បីឱ្យតែអ្នកប្រើដែល Log In ប៉ុណ្ណោះអាចចូលបាន៖

បង្កើត Middleware:
នៅ middleware.ts:
ts

Collapse

Wrap

Copy
import { withAuth } from "next-auth/middleware";

export default withAuth({
  pages: {
    signIn: "/login",
  },
});

export const config = {
  matcher: ["/profile"],
};
៨. សាកល្បង
ដំណើរការ Project:
bash

Collapse

Wrap

Run

Copy
npm run dev
សាកល្បង Flow:
ចូលទៅ http://localhost:3000/signup ដើម្បីបង្កើតគណនី។
ចូលទៅ http://localhost:3000/login ដើម្បី Log In។
បន្ទាប់ពី Log In ជោគជ័យ អ្នកនឹងត្រូវបាន Redirect ទៅ /profile ដែលបង្ហាញ Name និង Email។
ចុច Sign Out ដើម្បីត្រឡប់ទៅ /login។
៩. បញ្ហាទូទៅ និងវិធីដោះស្រាយ
Form មិន Submit:
ពិនិត្យថាតើ URL នៅក្នុង fetch (/api/signup) ត្រឹមត្រូវ។
ត្រូវប្រាកដថា handleSubmit ត្រូវបាន Bind ត្រឹមត្រូវនៅក្នុង <form>។
ពិនិត្យ Console សម្រាប់ Error (ឧ. 404 បើ API route មិនត្រឹមត្រូវ)។
Log In បរាជ័យ ("Invalid credentials"):
ពិនិត្យ auth.ts ថាតើ authorize function កំពុង Query Database ត្រឹមត្រូវ។
ត្រូវប្រាកដថា Password ត្រូវបាន Hash នៅពេល Sign Up (ប្រើ bcrypt.hash)។
បើប្រើ SQLite សូមប្រើ npx prisma studio ដើម្បីពិនិត្យថាតើ User data ត្រូវបានរក្សាទុក។
ទិន្ន័យមិនបញ្ចាំងនៅ Profile Page:
ត្រូវប្រាកដថា <SessionProvider> ត្រូវបានបន្ថែមនៅក្នុង app/layout.tsx។
ពិនិត្យថាតើ callbacks នៅក្នុង auth.ts បន្ថែម User data (id, email, name) ទៅ Session។
បើ session.user គឺ undefined សូមពិនិត្យ Console សម្រាប់ Error នៅ API route (/api/auth/[...nextauth])។
Database Errors:
ពិនិត្យ DATABASE_URL នៅក្នុង .env។
បើប្រើ Database ផ្សេង (ឧ. MongoDB) សូមកែ schema.prisma និង provider ទៅ "mongodb"។
Redirect មិនដំណើរការ:
ត្រូវប្រាកដថា router.push នៅក្នុង Sign Up/Log In forms ត្រូវបានហៅបន្ទាប់ពី Response ជោគជ័យ។
ពិនិត្យ pages.signIn នៅក្នុង authOptions ថាតើត្រូវបានកំណត់ទៅ /login។
១០. គន្លឹះសម្រាប់រៀនបន្ថែម
បន្ថែម Styling: ប្រើ Tailwind CSS (ដូចក្នុងឧទាហរណ៍ខាងលើ) ឬ CSS framework ផ្សេងដើម្បីធ្វើឱ្យ Forms មើលទៅស្អាត។
បន្ថែម Validation: ប្រើ react-hook-form ឬ zod សម្រាប់ Form validation (ឧ. ពិនិត្យ Password length, Email format)។
បន្ថែម Providers: បើចង់បន្ថែម Google/GitHub login សូមកំណត់ Providers បន្ថែមនៅក្នុង authOptions:
ts

Collapse

Wrap

Copy
import GoogleProvider from "next-auth/providers/google";
providers: [
  GoogleProvider({
    clientId: process.env.GOOGLE_CLIENT_ID!,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
  }),
  CredentialsProvider({...}),
]
អានឯកសារ:
NextAuth.js Docs: https://authjs.dev
Prisma Docs: https://www.prisma.io/docs
Debugging: បើជួបបញ្ហា បើក DevTools (F12) ដើម្បីពិនិត្យ Network requests និង Console errors។



---------------------

ប្រសិនមាន Error: This action with HTTP GET is not supported by NextAuth.js

សូមពិនិត្យ folder structure ជាចម្បង



ដូច្នេះ សូមផ្ញើរឿង ១ នេះ:
🔹 សូមផ្ញើឯកសារ route.ts ដែលនៅក្នុង path:

bash
Copy
Edit
/app/api/auth/[...nextauth]/route.ts
ឯកសារនេះគឺ សំខាន់បំផុត ដើម្បី:

ច្បាស់ថា GET / POST method បាន export ត្រឹមត្រូវ

NextAuth(authOptions) ត្រូវតាម auth.ts ដែលអ្នកបានសរសេរមក

🎯 នៅចុងក្រោយនេះ ខ្ញុំសន្និដ្ឋានថា:
អ្នកបានប្រើ UI signIn() ត្រឹមត្រូវ

auth.ts ត្រឹមត្រូវ

form នៅ UI មិនមាន action ទៅ /api/auth/signin/credentials

តែ NextAuth middleware អាច export methods ខុស

✴️ 99% បញ្ហានៅក្នុង route.ts ឬក៏ folder path ខុស

✅ ឧទាហរណ៍ route.ts ត្រឹមត្រូវ (សម្រាប់ App Router)
ts
Copy
Edit
// /app/api/auth/[...nextauth]/route.ts
import NextAuth from "next-auth";
import { authOptions } from "@/lib/auth"; // ឬ @/utils/auth.ts

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST }; // VERY IMPORTANT ✅




-------

1. ប្រើ DevTools → Network tab → ពិនិត្យ POST /api/auth/callback/credentials
✅ ធ្វើដូច្នេះ:

ចុច "Log In"

ទៅ tab Network

រក POST /api/auth/callback/credentials

